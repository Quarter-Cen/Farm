import { PrismaClient, Cow } from "@prisma/client";
import { IWeightData } from "./WeightData/IweightData";

const prisma = new PrismaClient();

export class WeightData implements IWeightData {
    async getWeight(
        weight: number | null,
        recordedAt: Date | null
    ): Promise<
        {
            month: string;
            averageWeight: number;
            minWeight: number;
            maxWeight: number;
        }[]
    > {
        try {
            const result = await prisma.cow.findMany({
                where: {
                    ...(weight ? { weight } : {}), // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ weight ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° weight
                    ...(recordedAt && !isNaN(recordedAt.getTime())
                        ? { recordedAt }
                        : {}), // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recordedAt
                },
                orderBy: {
                    recordedAt: "asc", // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                },
            });
            console.log("üìå Raw Data from Database:", result); // Debug

            // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ return ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏•‡∏¢
            if (result.length === 0) {
                console.log("‚ö†Ô∏è No data found.");
                return [];
            }

            // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            const groupedData = result.reduce((acc, entry) => {
                const month = new Date(entry.recordedAt).toLocaleString("default", {
                    month: "short", // ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô "Jan"
                });

                if (!acc[month]) {
                    acc[month] = [];
                }

                acc[month].push(entry.weight); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
                return acc;
            }, {} as Record<string, number[]>);

            console.log("üìå Grouped Data:", groupedData); // Debug

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Object Array ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            const transformedData = Object.entries(groupedData).map(
                ([month, weights]) => ({
                    month, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                    averageWeight:
                        weights.reduce((sum, w) => sum + w, 0) / weights.length, // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                    minWeight: Math.min(...weights), // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
                    maxWeight: Math.max(...weights), // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                })
            );

            console.log("Transformed Data:", transformedData); // Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á
            return transformedData;
        } catch (error) {
            console.error("Error fetching cow weight data:", error);
            return [];
        }
    }
}
