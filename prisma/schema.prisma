generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    BigInt    @id @default(autoincrement())
  firstName             String
  lastName              String
  gender                Gender
  employmentDurationHours Int
  workLocation          String
  salary                Float
  startDate             DateTime
  workHour              Int
  phoneNumber           String     @unique
  address               String
  birthdate             DateTime
  email                 String     @unique
  password              String

  admin                 Admin?
  supervisor            Supervisor?
  dairyWorker           DairyWorker?
  veterian              Veterian?

  @@map("users")
}

model Admin {
  id                    BigInt @id @default(autoincrement())
  userId                BigInt @unique
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  foodImports           FoodImp[]
  exports               Export[]

  @@map("admins")
}

model Supervisor {
  id                    BigInt @id @default(autoincrement())
  userId                BigInt @unique
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productReports        ProductReport[]

  @@map("supervisors")
}

model DairyWorker {
  id                    BigInt @id @default(autoincrement())
  userId                BigInt @unique
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stockUsage            StockUsage[]
  @@map("dairy_workers")
}

model Veterian {
  id                    BigInt @id @default(autoincrement())
  userId                BigInt @unique
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  treatments            Treatment[]
  cows                  Cow[]

  @@map("veterians")
}

model FoodImp {
  id                    BigInt   @id @default(autoincrement())
  name                  String
  date                  DateTime
  importFrom            String
  type                  FoodType
  quantity              Int
  pricePerUnit          Float

  adminId               BigInt
  admin                 Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  @@map("food_imps")  
}

model Stock {
  id           BigInt   @id @default(autoincrement())

  type         FoodType
  quantity     Int
  unit         Int
  status       StockStatus @default(AVAILABLE)
  updatedAt    DateTime @updatedAt
  stockUsage        StockUsage[]

  @@map("stocks")
}


model StockUsage {
  id          BigInt   @id @default(autoincrement())
  stockId     BigInt
  stock       Stock @relation(fields: [stockId], references: [id], onDelete: Cascade) // ใช้ Stock จริง ๆ

  quantity    Int
  usedById    BigInt
  usedBy      DairyWorker @relation(fields: [usedById], references: [id], onDelete: Cascade)
  usedAt      DateTime @default(now())

  @@map("stock_usages")
}


model ProductReport {
  id                    BigInt   @id @default(autoincrement())
  date                  DateTime
  quantityOfProduct     Int
  cowZone               String

  supervisorId          BigInt
  supervisor            Supervisor @relation(fields: [supervisorId], references: [id], onDelete: Cascade)

  @@map("product_reports")
}

model Export {
  id                    BigInt   @id @default(autoincrement())
  customer              String
  quantity              Int
  status                ExportStatus
  type                  String
  destination           String
  pricePerQuantity      Float

  adminId               BigInt
  admin                 Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  methodId              BigInt
  paymentMethod         PaymentMethod @relation(fields: [methodId], references: [id], onDelete: Cascade)
  createdAt             DateTime     @default(now()) 
  @@map("exports")
}

model PaymentMethod {
  id                    BigInt @id @default(autoincrement())
  name                  String

  exports               Export[]

  @@map("payment_methods")
}


  model Cow {
    id                    BigInt    @id @default(autoincrement())
    name                  String
    gender                String
    age                   Int
    weight                Float
    birthDate             DateTime
    breed                 String
    healthStatus          HealthStatus
    veterianId            BigInt?
    veterian              Veterian? @relation(fields: [veterianId], references: [id], onDelete: SetNull)

    treatments            Treatment[]

    @@map("cows")
  }


model Treatment {
  id                    BigInt   @id @default(autoincrement())
  nameDisease           String
  events                String
  details               String
  date                  DateTime
  drugName              String
  status                HealthStatus
  notation              String
  cowWeight             Float
  veterianId            BigInt
  veterian              Veterian @relation(fields: [veterianId], references: [id], onDelete: Cascade)


    cowId                 BigInt
    cow                   Cow      @relation(fields: [cowId], references: [id], onDelete: Cascade)

    @@map("treatments")
  }



enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ExportStatus {
  PENDING
  COMPLETED
  CANCELLED
  IN_PROGRESS
}

enum HealthStatus {
  HEALTHY
  SICK
  INJURED
  DEAD
}


  enum FoodType {
    VEGETABLE
    MEAT
    DAIRY
    GRAIN
  }

  enum StockStatus {
    AVAILABLE
    OUT_OF_STOCK
    RESERVED
  }
